
import re
from typing import Dict, List, Any
from langdetect import detect
from src.utils import setup_logging

logger = setup_logging()

class MultilingualProcessor:
    """Handle multilingual text processing and language detection"""
    
    def __init__(self):
        self.language_patterns = {
            'sanskrit': r'[\u0900-\u097F]',  # Devanagari
            'hindi': r'[\u0900-\u097F]',     # Also Devanagari
            'english': r'[a-zA-Z]'
        }
        
        self.concept_translations = {
            'dharma': {'hindi': '‡§ß‡§∞‡•ç‡§Æ', 'sanskrit': '‡§ß‡§∞‡•ç‡§Æ', 'english': 'righteousness'},
            'karma': {'hindi': '‡§ï‡§∞‡•ç‡§Æ', 'sanskrit': '‡§ï‡§∞‡•ç‡§Æ', 'english': 'action'},
            'moksha': {'hindi': '‡§Æ‡•ã‡§ï‡•ç‡§∑', 'sanskrit': '‡§Æ‡•ã‡§ï‡•ç‡§∑', 'english': 'liberation'},
            'bhakti': {'hindi': '‡§≠‡§ï‡•ç‡§§‡§ø', 'sanskrit': '‡§≠‡§ï‡•ç‡§§‡§ø', 'english': 'devotion'},
            'yoga': {'hindi': '‡§Ø‡•ã‡§ó', 'sanskrit': '‡§Ø‡•ã‡§ó', 'english': 'union'},
            'gyana': {'hindi': '‡§ú‡•ç‡§û‡§æ‡§®', 'sanskrit': '‡§ú‡•ç‡§û‡§æ‡§®', 'english': 'knowledge'}
        }
    
    def detect_language(self, text: str) -> str:
        """Detect primary language of text"""
        try:
            # Use langdetect for basic detection
            detected = detect(text)
            
            # Check for Devanagari script
            if re.search(self.language_patterns['sanskrit'], text):
                # Distinguish between Sanskrit and Hindi
                sanskrit_indicators = ['‡§∂‡•ç‡§≤‡•ã‡§ï', '‡§Æ‡§®‡•ç‡§§‡•ç‡§∞', '‡•ê', '‡••']
                if any(indicator in text for indicator in sanskrit_indicators):
                    return 'sanskrit'
                return 'hindi'
            
            return 'english' if detected == 'en' else detected
            
        except Exception as e:
            logger.warning(f"Language detection failed: {e}")
            return 'english'
    
    def expand_query(self, query: str) -> str:
        """Expand query with multilingual concepts"""
        expanded_query = query
        
        for concept, translations in self.concept_translations.items():
            if concept.lower() in query.lower():
                # Add all translations
                all_forms = [translations['hindi'], translations['sanskrit'], translations['english']]
                expanded_query += " " + " ".join(all_forms)
        
        return expanded_query
    
    def format_multilingual_text(self, content: Dict[str, str], language_preference: str = "all") -> Dict[str, str]:
        """Format text according to language preference"""
        formatted = {}
        
        if language_preference == "all" or language_preference == "üåç All Languages":
            formatted = {
                "sanskrit": content.get("sanskrit", ""),
                "hindi": content.get("hindi", ""),
                "english": content.get("english", ""),
                "combined": content.get("text", "")
            }
        elif language_preference == "üáÆüá≥ Hindi":
            formatted = {
                "primary": content.get("hindi", ""),
                "secondary": content.get("english", ""),
                "original": content.get("sanskrit", "")
            }
        elif language_preference == "üá¨üáß English":
            formatted = {
                "primary": content.get("english", ""),
                "secondary": content.get("hindi", ""),
                "original": content.get("sanskrit", "")
            }
        elif language_preference == "üïâÔ∏è Sanskrit":
            formatted = {
                "primary": content.get("sanskrit", ""),
                "secondary": content.get("hindi", ""),
                "translation": content.get("english", "")
            }
        
        return formatted
    
    def transliterate_devanagari(self, text: str) -> str:
        """Basic transliteration from Devanagari to Roman"""
        # Simple character mapping for basic transliteration
        transliteration_map = {
            '‡§Ö': 'a', '‡§Ü': 'aa', '‡§á': 'i', '‡§à': 'ii', '‡§â': 'u', '‡§ä': 'uu',
            '‡§è': 'e', '‡§ê': 'ai', '‡§ì': 'o', '‡§î': 'au',
            '‡§ï': 'ka', '‡§ñ': 'kha', '‡§ó': 'ga', '‡§ò': 'gha', '‡§ô': 'nga',
            '‡§ö': 'cha', '‡§õ': 'chha', '‡§ú': 'ja', '‡§ù': 'jha', '‡§û': 'nja',
            '‡§ü': 'ta', '‡§†': 'tha', '‡§°': 'da', '‡§¢': 'dha', '‡§£': 'na',
            '‡§§': 'ta', '‡§•': 'tha', '‡§¶': 'da', '‡§ß': 'dha', '‡§®': 'na',
            '‡§™': 'pa', '‡§´': 'pha', '‡§¨': 'ba', '‡§≠': 'bha', '‡§Æ': 'ma',
            '‡§Ø': 'ya', '‡§∞': 'ra', '‡§≤': 'la', '‡§µ': 'va',
            '‡§∂': 'sha', '‡§∑': 'sha', '‡§∏': 'sa', '‡§π': 'ha',
            '‡§Ç': 'm', '‡§É': 'h', '‡•ç': '', '‡•§': '.', '‡••': '||'
        }
        
        transliterated = ""
        for char in text:
            transliterated += transliteration_map.get(char, char)
        
        return transliterated
